var dom = require('../doms').android;
var View = require('../base_views').AndroidBaseView;

//0 - vertical
//1 - horizontal
class LinearLayout extends View {
  constructor(props, children) {
    super(props, children);

    this.setIds([
      'id'
    ]);

    this.offsetY = 0;
    this.offsetX = 0;
    this.totalWeight = 0;
    this.isWeighted = false;
  }

  getChildWidth (props, parentWidth) {
    if (props.weight) {
      this.isWeighted = true;
      this.totalWeight  += props.weight*1;
    }

    if (props.width) {
      props.width  += "";

      if (props.width.indexOf("match_parent") > -1){
        return parentWidth;
      }

      return props.width;
    }

    return props.width;
  }

  getChildHeight (props, parentHeight) {
    if (props.height) {
      props.height  += "";

      if (props.height.indexOf("match_parent") > -1){
        return parentHeight;
      }

      return props.height;
    }

    return props.height;
  }

  setOffsetX(props, spacingRight) {
    let offsetX;
    let width;

    width = props.width*1;

    console.log(width, spacingRight);
    this.offsetX += width + spacingRight;
  }

  setOffsetY(props, spacingBottom) {
    let offsetY;
    let height;

    height = props.height*1;

    this.offsetY += height + spacingBottom;
  }

  getChildXPos(props) {
    if (this.orientation == "0")
      return   props.x;

    let x = this.offsetX;
    let  spacingRight = 0;

    if (props.margin) {
      let values = props.margin.split(",");
      spacingRight = values[2]*1 || 0;
    }

    this.setOffsetX(props, spacingRight);

    return x;
  }

  fixVertical(props) {
    var y = (this.props.height*1 / 2) - (props.height*1 / 2);

    return y;
  }

  getChildYPos(props) {
    if (this.orientation == "1") {
      if (this.props.gravity && this.props.gravity == "center_vertical") {
        return this.fixVertical(props);
      }

     return  props.y;
    }

    let y = this.offsetY;
    let spacingBottom = 0;

    if (props.margin) {
      let values = props.margin.split(",");
      spacingBottom = values[3]*1|| 0;
    }

    this.setOffsetY(props, spacingBottom);

    return y;
  }

  setOrientation(params) {
    this.orientation = this.props.orientation?"0": "1";
  }

  resolveChildren(debug) {
    var _this = this;
    var width = this.props.width;
    var height = this.props.height;
    var remainingWidth = this.props.width*1;
    var remainingHeight = this.props.height*1;
    var hzMargin = 0;
    var vMargin = 0;
    var expandNode = {};
    var centerInParent = false;

    centerInParent = this.children.length < 2 &&
        this.props.gravity == "center" ? true : false;

    if (window.__OS == "IOS") {
      this.children.map(function(child) {
        child.props.width = _this.getChildWidth(child.props, width);
        child.props.centerInParent = centerInParent;

        if (child.props.width) {
            remainingWidth -= child.props.width;
        }

        child.props.height = _this.getChildHeight(child.props, height);
        if (child.props.height) {
            remainingHeight -= child.props.height;
        }

        if (child.props.margin) {
          let values = child.props.margin.split(",");
          hzMargin += values[0]*1 + values[2]*1;
          vMargin += values[1]*1 + values[3]*1;
        }

        if (child.props.wrap == "true") {
          expandNode = child;
        }

        child.debug = debug?"true":false;
      });


      if (expandNode.props) {
          if (_this.orientation==1) {
            expandNode.props.width = remainingWidth  - hzMargin;
          }

          if (_this.orientation==0) {
            expandNode.props.height = remainingHeight - vMargin ;
          }
      }

      if (this.isWeighted) {
        _this.offsetX = 0;
      }

      return this.children.map(function(child) {
        if (_this.isWeighted) {
          child.props.width = Math.floor(width/_this.totalWeight) * child.props.weight * 1;
          child.props.x = _this.getChildXPos(child.props);
        } else {
          child.props.x =  _this.getChildXPos(child.props);
          child.props.y =  _this.getChildYPos(child.props);
        }

        return  child.render();
      });
    }

    return this.children.map(function(child) {
      child.__filename = _this.__filename;
      return  child.render();
    });
  }

  setPadding(params) {
    if (window.__OS == "IOS" && params.padding) {
      let values = params.padding.split(",");

      params.x = values[0];
      params.y = values[1];
      params.width = params.width*1 - values[0]*1 - values[2]*1;
      params.height = params.height*1 - values[1]*1 - values[3]*1;
    }
  }

  render() {
    var params = this.props;
    var debug = params.debug || this.debug;
    var children;

    if (debug) {
      params.debug = "true";
    }

    this.setOrientation(params);
    this.setPadding(params);

    children = this.resolveChildren(debug);

    params.__filename = params.__source.fileName  + ' :ln ' + params.__source.lineNumber;

    return (
      <linearLayout
        id={this.props.id?this.props.id:this.idSet.id}
        params={params}>

        {children}
      </linearLayout>
    );
  }
}

module.exports = LinearLayout;
